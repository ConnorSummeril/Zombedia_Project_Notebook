After our stint with Sugar Labs, our team was in a strange state. The team was constantly working on various things; uploading artifacts to Slack, uploading documents to RedMine, talking about Scrum Agile methodology implementations. We were in a state of the unknown. We had times where we would say something like "Everyone do this." or "We need to be accoutable for this."

As many of our software development texts have demonstrated, when everyone is accountable for something, nobody is accountable for anything. Our team felt this. We were all working and not really accomplishing much. We would constantly use the term "we" and no single person would really get anything meaningful done. This type of communication was unhelpful for our team, our project contributions, and our peers who were expecting meaningful output from us.

When a team is in the thick of this thought mindset it is difficult to recognize and do something to mitigate the problems. Holly was the first to explicitly address this problem in open conversation. The rest of the team was on board. Steve suggested that CJ become scrum master. Luke suggested Manoj become product owner. CJ suggested that the rest of the team be considered as developers. All parties oblidged to these roles. We came to an agreement that we would demonstrate our roles in some form on our RedMine page and actually implement the methodology we were working under.

Ultimately what happened was that Holly, Luke, and Steve would be developers, CJ would be the scrum master, and Manoj would be the product owner. The developers would be responsible for elicitation, and development. The product owner would be responsible for sprint reviews and methodology adherance. The scrum master would be responsible for holding everyone accountable to agreed upon goals and facilitating stand-ups.

With these roles placed, we had to decide how to reflect them in our process management tool. It came down to larger goals being assigned in sprints on RedMine. Acceptance criteria were established in the subtasks of goals in the RedMine interface. Documents were compiled and our status and story points would be updated and documented every time tasks were completed or worked on. This specific implementation of our tool would not have been possible had we not dealt with RedMine in our stint with Sugar Labs. We simply would not have understood the tool enough.

With the developers using this tool, the scrum master checking the actual work, and the product owner investigating our sprints, everyone became much more effective. Tasks were no longer this abstract thing. Tasks became concrete and understandible. At the same time, expectations became clear. We all knew what we needed to do as a team and effectively implemented those tasks. Our team gelled more because there were no unclear expectations and people could speak more freely about what needed to be done by individuals.

This organization process can be clearly demonstrated in the screenshots of our separate overview pages (Zombedia_Overview_Screenshot, GNUcose_Overview_Screenshot).


